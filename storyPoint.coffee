if Meteor.isClient
  #Mizzao All User Connections
  @UserConnections = new (Meteor.Collection)('user_status_sessions')
  #Sync Times Across Timezones for login dates

  relativeTime = (timeAgo) ->
    ago = undefined
    days = undefined
    diff = undefined
    time = undefined
    diff = moment.utc(TimeSync.serverTime() - timeAgo)
    time = diff.format('H:mm:ss')
    days = +diff.format('DDD') - 1
    ago = (if days then days + 'd ' else '') + time
    ago + ' ago'

  Template.register.events 'submit form': (event, template) ->
    event.preventDefault()
    nameVar = template.find('#register-name').value
    photoVar = template.find('#register-photo').value
    passwordVar = template.find('#register-password').value

    if nameVar is ''
        toastr.error 'Please enter your name'
        return

    if passwordVar is ''
        toastr.error 'Please enter a password'
        return

    if photoVar is ''
        toastr.error 'Please enter a profile image URL...'
        return

    Accounts.createUser
      username: nameVar
      password: passwordVar
      profile:
        avatur_url: photoVar
        current_vote: ''
        vote_ready: false
    return
  Template.login.events 'submit form': (event, template) ->
    event.preventDefault()
    nameVar = template.find('#login-name').value
    passwordVar = template.find('#login-password').value
    Meteor.loginWithPassword nameVar, passwordVar, (error) ->
        if error
            toastr.error 'Login Failed'
    return
  Template.dashboard.events
    'click .logout': (event) ->
      event.preventDefault()
      Meteor.logout()
      return
    'keyup #current-vote': (event, template) ->
      event.preventDefault()
      theEvent = event
      key = theEvent.keyCode or theEvent.which
      if key == 13
        return
      key = String.fromCharCode(key)
      currValue = template.find('#current-vote').value
      regex = /[0-9]|\./
      if !regex.test(key)
        newValue = currValue.substring(0, currValue.length - 1)
        template.find('#current-vote').value = newValue
      if currValue.length > 1
        newValue = currValue.substring(0, 1)
        template.find('#current-vote').value = newValue
      currVote = template.find('#current-vote').value
      Meteor.users.update { _id: Meteor.userId() }, { $set: 'profile.current_vote': currVote }, { multi: true }, ->
        if currVote != ''
          Meteor.users.update { _id: Meteor.userId() }, { $set: 'profile.vote_ready': true }, multi: true
        else
          Meteor.users.update { _id: Meteor.userId() }, { $set: 'profile.vote_ready': false }, multi: true
        return
      return
  UI.registerHelper 'userStatus', UserStatus
  UI.registerHelper 'localeTime', (date) ->
    if date != null then date.toLocaleString() else undefined
  UI.registerHelper 'relativeTime', relativeTime

  Template.login.loggedIn = ->
    Meteor.userId()

  Template.serverStatus.anonymous = ->
    UserConnections.find userId: $exists: false

  Template.serverStatus.allVoted = ->
    if Meteor.users.find(
        'status.online': true
        'profile.current_vote': '').count() == 0
      { class: 'public-vote visible' }
    else
      { class: 'public-vote' }

  Template.serverStatus.users = ->
    Meteor.users.find()

  Template.serverStatus.userClass = ->
    _ref = undefined
    if (if (_ref = @status) != null then _ref.idle else undefined)
      'warning'
    else
      'success'

  Template.serverStatus.connections = ->
    UserConnections.find userId: @_id

  Template.login.events = 'submit form': (e, tmpl) ->
    input = undefined
    e.preventDefault()
    input = tmpl.find('input[name=username]')
    input.blur()
    Meteor.insecureUserLogin input.value, (err, res) ->
      if err
        return console.log(err)
      return
  Deps.autorun (c) ->
    try
      UserStatus.startMonitor
        threshold: 30000
        idleOnBlur: true
      return c.stop()
    catch _error
    return

if Meteor.isServer
  process.env.HTTP_FORWARDED_COUNT = 1
  Meteor.publish null, ->
    [
      Meteor.users.find({ 'status.online': true }, fields:
        status: 1
        username: 1
        'profile.avatur_url': 1
        'profile.current_vote': 1
        'profile.vote_ready': 1)
      UserStatus.connections.find()
    ]

# ---
# generated by js2coffee 2.0.3
